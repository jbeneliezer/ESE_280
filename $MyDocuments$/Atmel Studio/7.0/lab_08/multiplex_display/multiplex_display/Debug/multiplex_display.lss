
AVRASM ver. 2.2.7  E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\multiplex_display\multiplex_display\main.asm Tue Oct 27 20:41:12 2020

E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\multiplex_display\multiplex_display\main.asm(20): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\multiplex_display\multiplex_display\main.asm(20): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ;*
                                 ;* Title: multiplex_display.asm
                                 ;* Author: Judah Ben-Eliezer
                                 ;* Version: 1.0
                                 ;* Last updated: 10/27/2020
                                 ;* Target: ATMega4809
                                 ;*
                                 ;* DESCRIPTION
                                 ;* 
                                 ;* 
                                 ;*
                                 ;*
                                 ;* VERSION HISTORY
                                 ;* 1.0 Original version
                                 ;***************************************************************************
                                 
                                 
                                 .list
                                 
                                 
                                 .dseg
                                 
002800                           led_display: .byte 4
002804                           digit_num: .byte 1
                                 
                                 
                                 .cseg
                                 
                                 start:
000000 ef0f                      	ldi r16, $FF
000001 e010                      	ldi r17, $00
000002 b90c                      	out VPORTD_DIR, r16
000003 b909                      	out VPORTC_OUT, r16
000004 9310 2804                 	sts digit_num, r17
000006 e2b8                      	ldi XH, HIGH(led_display)
000007 e0a0                      	ldi XL, LOW(led_display)
                                 
                                 main_loop:
000008 d001                      	rcall multiplex_display
000009 cffe                      	rjmp main_loop
                                 
                                 ;***************************************************************************
                                 ;* 
                                 ;* "multiplex_display" - Multiplex the Four Digit LED Display
                                 ;*
                                 ;* Description: Updates a single digit of the display and increments the 
                                 ;*  digit_num to the value of the digit position to be displayed next.
                                 ;*
                                 ;* Author:	Judah Ben-Eliezer
                                 ;* Version:	1.0
                                 ;* Last updated:	10/27/2020
                                 ;* Target:						;ATmega4809 @ 3.3MHz
                                 ;* Number of words:	39
                                 ;* Number of cycles: 30
                                 ;* Low registers modified:	none
                                 ;* High registers modified:	none
                                 ;*
                                 ;* Parameters:
                                 ;* led_display: a four byte array that holds the segment values
                                 ;*  for each digit of the display. led_display[0] holds the segment pattern
                                 ;*  for digit 0 (the rightmost digit) and so on.
                                 ;* digit_num: a byte variable, the least significant two bits provide the
                                 ;* index of the next digit to be displayed.
                                 ;*
                                 ;* Returns: Outputs segment pattern and turns on digit driver for the next
                                 ;*  position in the display to be turned ON in the multiplexing sequence.
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;***************************************************************************
                                 
                                 
                                 multiplex_display:
00000a 9110 2804                 	lds r17, digit_num
00000c 9140 2804                 	lds r20, digit_num
00000e 7013                      	andi r17, $03
00000f 0fa1                      	add XL, r17
000010 912c                      	ld r18, X
000011 e056                      	ldi r21, $06
                                 loop:
000012 0f44                      	lsl r20
000013 955a                      	dec r21
000014 f7e9                      	brne loop
                                 
000015 d006                      	rcall hex_to_7seg
000016 b92d                      	out VPORTD_OUT, r18
000017 b949                      	out VPORTC_OUT, r20
000018 9513                      	inc r17
000019 9310 2804                 	sts digit_num, r17
00001b 9508                      	ret
                                 	
                                 
                                 
                                 
                                 ;***************************************************************************
                                 ;* 
                                 ;* "hex_to_7seg" - Hexadecimal to Seven Segment Conversion
                                 ;*
                                 ;* Description: Converts a right justified hexadecimal digit to the seven
                                 ;* segment pattern required to display it. Pattern is right justified a
                                 ;* through g. Pattern uses 0s to turn segments on ON.
                                 ;*
                                 ;* Author:						Ken Short
                                 ;* Version:						1.0						
                                 ;* Last updated:				101620
                                 ;* Target:						ATmega4809
                                 ;* Number of words:				8
                                 ;* Number of cycles:			13
                                 ;* Low registers modified:		none		
                                 ;* High registers modified:		r16, r18, ZL, ZH
                                 ;*
                                 ;* Parameters: r18: right justified hex digit, high nibble 0
                                 ;* Returns: r18: segment values a through g right justified
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;***************************************************************************
                                 
                                 hex_to_7seg:
00001c 702f                      	andi r18, 0x0F				;clear ms nibble
00001d e0f0                          ldi ZH, HIGH(hextable * 2)  ;set Z to point to start of table
00001e e4e8                          ldi ZL, LOW(hextable * 2)
00001f e000                          ldi r16, $00                ;add offset to Z pointer
000020 0fe2                          add ZL, r18
000021 1ff0                          adc ZH, r16
000022 9124                          lpm r18, Z                  ;load byte from table pointed to by Z
000023 9508                      	ret
                                 
                                     ;Table of segment values to display digits 0 - F
                                     ;!!! seven values must be added - verify all values
000024 4f01
000025 0612
000026 244c
000027 0f20
000028 0400
000029 6008
00002a 4231
00002b 3830                      hextable: .db $01, $4F, $12, $06, $4C, $24, $20, $0F, $00, $04, $08, $60, $31, $42, $30, $38


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   1 y  :   0 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   5 r17:   7 r18:   5 r19:   0 r20:   3 
r21:   2 r22:   0 r23:   0 r24:   0 r25:   0 r26:   2 r27:   1 r28:   0 
r29:   0 r30:   2 r31:   2 
Registers used: 11 out of 35 (31.4%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   1 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :   1 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   1 
jmp   :   0 ld    :   1 ldd   :   0 ldi   :   8 lds   :   2 lpm   :   2 
lsl   :   1 lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   4 
pop   :   0 push  :   0 rcall :   2 ret   :   2 reti  :   0 rjmp  :   1 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   :   2 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 16 out of 114 (14.0%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000058     72     16     88   49152   0.2%
[.dseg] 0x002800 0x002805      0      5      5    6144   0.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
