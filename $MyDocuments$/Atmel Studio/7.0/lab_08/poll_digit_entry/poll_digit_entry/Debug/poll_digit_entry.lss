
AVRASM ver. 2.2.7  E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\poll_digit_entry\poll_digit_entry\main.asm Wed Oct 28 01:15:51 2020

E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\poll_digit_entry\poll_digit_entry\main.asm(29): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\poll_digit_entry\poll_digit_entry\main.asm(29): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ;* 
                                 ;* "poll_digit_entry" - Polls Pushbutton 1 for Conditional Digit Entry
                                 ;*
                                 ;* Description:
                                 ;* Polls the flag associated with pushbutton 1. This flag is connected to
                                 ;* PE0. If the flag is set, the contents of the array bcd_entries is shifted
                                 ;* left and the BCD digit set on the least significant 4 bits of PORTA_IN are 
                                 ;* stored in the least significant byte of the bcd_entries array. Then the
                                 ;* corresponding segment values for each digit in the bcd_entries display are
                                 ;* written into the led_display. Note: entry of a non-BCD value is ignored.
                                 ;* Author:	Judah Ben-Eliezer
                                 ;* Version:	1.0
                                 ;* Last updated:	10/28/2020
                                 ;* Target:	ATmega4809
                                 ;* Number of words:
                                 ;* Number of cycles:
                                 ;* Low registers modified:
                                 ;* High registers modified:
                                 ;*
                                 ;* Parameters: 
                                 ;* Returns:
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;***************************************************************************
                                 
                                 .list
                                 
                                 .dseg
002800                           bcd_entries: .byte 4
002804                           led_display: .byte 4
                                 
                                 .cseg
                                 
                                 start:
000000 9880                      	cbi VPORTE_DIR, 0
000001 e000                      	ldi r16, $00
000002 b900                      	out VPORTA_DIR, r16
000003 e2b8                      	ldi XH, HIGH(bcd_entries)
000004 e0a0                      	ldi XL, LOW(bcd_entries)
000005 e2d8                      	ldi YH, HIGH(led_display)
000006 e0c4                      	ldi YL, LOW(led_display)
                                 
                                 main_loop:
000007 9990                      	sbic VPORTE_IN, 0
000008 d001                      	rcall poll_digit_entry
000009 cffd                      	rjmp main_loop
                                 
                                 poll_digit_entry:
00000a b112                      	in r17, VPORTA_IN
00000b 301a                      	cpi r17, $0A
00000c f7d0                      	brsh main_loop
00000d e023                      	ldi r18, $03
                                 shift_bcd_entries:
00000e 1bb2                      	sub XH, r18
00000f 913d                      	ld r19, X+
000010 933c                      	st X, r19
000011 952a                      	dec r18
000012 f7d9                      	brne shift_bcd_entries
000013 e0a0                      	ldi XL, LOW(bcd_entries)
000014 931c                      	st X, r17
000015 e044                      	ldi r20, $04
                                 bcd_to_led:
000016 954a                      	dec r20
000017 0fa4                      	add XL, r20
000018 0fc4                      	add YL, r20
000019 912c                      	ld r18, X
00001a d003                      	rcall hex_to_7seg
00001b 8328                      	st Y, r18
00001c f7c9                      	brne bcd_to_led
00001d 9508                      	ret
                                 
                                 
                                 hex_to_7seg:
00001e 702f                      	andi r18, 0x0F				;clear ms nibble
00001f e0f0                          ldi ZH, HIGH(hextable * 2)  ;set Z to point to start of table
000020 e4ec                          ldi ZL, LOW(hextable * 2)
000021 e000                          ldi r16, $00                ;add offset to Z pointer
000022 0fe2                          add ZL, r18
000023 1ff0                          adc ZH, r16
000024 9124                          lpm r18, Z                  ;load byte from table pointed to by Z
000025 9508                      	ret
                                 
                                     ;Table of segment values to display digits 0 - F
                                     ;!!! seven values must be added - verify all values
000026 4f01
000027 0612
000028 244c
000029 0f20
00002a 0400
00002b 6008
00002c 4231
00002d 3830                      hextable: .db $01, $4F, $12, $06, $4C, $24, $20, $0F, $00, $04, $08, $60, $31, $42, $30, $38
                                 
                                 	
                                 	


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   4 y  :   1 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   4 r17:   3 r18:   8 r19:   2 r20:   4 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   3 r27:   2 r28:   2 
r29:   1 r30:   2 r31:   2 
Registers used: 14 out of 35 (40.0%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   3 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   1 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   1 cpse  :   0 dec   :   2 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   0 
jmp   :   0 ld    :   2 ldd   :   0 ldi   :  11 lds   :   0 lpm   :   2 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   1 
pop   :   0 push  :   0 rcall :   2 ret   :   2 reti  :   0 rjmp  :   1 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   1 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 
sts   :   0 sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 19 out of 114 (16.7%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00005c     76     16     92   49152   0.2%
[.dseg] 0x002800 0x002808      0      8      8    6144   0.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
