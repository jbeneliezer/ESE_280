
AVRASM ver. 2.2.7  E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\enter_digits\enter_digits\main.asm Wed Oct 28 01:12:41 2020

E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\enter_digits\enter_digits\main.asm(27): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
E:\ESE_280\$MyDocuments$\Atmel Studio\7.0\lab_8\enter_digits\enter_digits\main.asm(27): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ;*
                                 ;* Title: Enter Digits
                                 ;* Author:	Judah Ben-Eliezer
                                 ;* Version:	1.0
                                 ;* Last updated:	10/28/2020
                                 ;* Target:			;ATmega4809 @3.3MHz
                                 ;*
                                 ;* DESCRIPTION
                                 ;* This program polls the flag associated with pushbutton 1. This flag is
                                 ;* connected to PE0. If the flag is set, the contents of the array bcd_entries
                                 ;* is shifted left and the BCD digit set on the least significant 4 bits of
                                 ;* PORTA_IN are stored in the least significant byte of the bcd_entries array.
                                 ;* Then the corresponding segment values for each digit in the bcd_entries
                                 ;* display are written into the led_display. Note: entry of a non-BCD value
                                 ;* is ignored.
                                 ;*
                                 ;* This program also continually multiplexes the display so that the digits
                                 ;* entered are conatantly seen on the display. Before any digits are entered
                                 ;* the display displays 0000.
                                 ;*
                                 ;* VERSION HISTORY
                                 ;* 1.0 Original version
                                 ;***************************************************************************
                                 
                                 .list
                                 
                                 .dseg
002800                           bcd_entries: .byte 4
002804                           led_display: .byte 4
002808                           digit_num: .byte 1
                                 
                                 .cseg
                                 
                                 start:
000000 9880                      	cbi VPORTE_DIR, 0
000001 e000                      	ldi r16, $00
000002 b900                      	out VPORTA_DIR, r16
000003 9500                      	com r16
000004 b90c                      	out VPORTD_DIR, r16
000005 e2b8                      	ldi XH, HIGH(bcd_entries)
000006 e0a0                      	ldi XL, LOW(bcd_entries)
000007 e2d8                      	ldi YH, HIGH(led_display)
000008 e0c4                      	ldi YL, LOW(led_display)
                                 
                                 main_loop:
000009 9990                      	sbic VPORTE_IN, 0
00000a d001                      	rcall poll_digit_entry
00000b cffd                      	rjmp main_loop
                                 
                                 poll_digit_entry:
00000c b112                      	in r17, VPORTA_IN
00000d 301a                      	cpi r17, $0A
00000e f7d0                      	brsh main_loop
00000f e023                      	ldi r18, $03
                                 shift_bcd_entries:
000010 1bb2                      	sub XH, r18
000011 913d                      	ld r19, X+
000012 933c                      	st X, r19
000013 952a                      	dec r18
000014 f7d9                      	brne shift_bcd_entries
000015 e0a0                      	ldi XL, LOW(bcd_entries)
000016 931c                      	st X, r17
000017 e044                      	ldi r20, $04
                                 bcd_to_led:
000018 954a                      	dec r20
000019 0fa4                      	add XL, r20
00001a 0fc4                      	add YL, r20
00001b 912c                      	ld r18, X
00001c d017                      	rcall hex_to_7seg
00001d 8328                      	st Y, r18
00001e f7c9                      	brne bcd_to_led
00001f e060                      	ldi r22, $00
000020 9360 2808                 	sts digit_num, r22
000022 e0c4                      	ldi YL, LOW(led_display)
                                 multiplex_display:
000023 9110 2808                 	lds r17, digit_num
000025 9140 2808                 	lds r20, digit_num
000027 7013                      	andi r17, $03
000028 0fa1                      	add XL, r17
000029 8128                      	ld r18, Y
00002a e056                      	ldi r21, $06
                                 loop:
00002b 0f44                      	lsl r20
00002c 955a                      	dec r21
00002d f7e9                      	brne loop
00002e b92d                      	out VPORTD_OUT, r18
00002f b949                      	out VPORTC_OUT, r20
000030 9513                      	inc r17
000031 9310 2808                 	sts digit_num, r17
000033 9508                      	ret
                                 
                                 
                                 hex_to_7seg:
000034 702f                      	andi r18, 0x0F				;clear ms nibble
000035 e0f0                          ldi ZH, HIGH(hextable * 2)  ;set Z to point to start of table
000036 e7e8                          ldi ZL, LOW(hextable * 2)
000037 e000                          ldi r16, $00                ;add offset to Z pointer
000038 0fe2                          add ZL, r18
000039 1ff0                          adc ZH, r16
00003a 9124                          lpm r18, Z                  ;load byte from table pointed to by Z
00003b 9508                      	ret
                                 
                                     ;Table of segment values to display digits 0 - F
                                     ;!!! seven values must be added - verify all values
00003c 4f01
00003d 0612
00003e 244c
00003f 0f20
000040 0400
000041 6008
000042 4231
000043 3830                      hextable: .db $01, $4F, $12, $06, $4C, $24, $20, $0F, $00, $04, $08, $60, $31, $42, $30, $38
                                 
                                 	
                                 	


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   4 y  :   2 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   6 r17:   8 r18:  10 r19:   2 r20:   7 
r21:   2 r22:   2 r23:   0 r24:   0 r25:   0 r26:   4 r27:   2 r28:   3 
r29:   1 r30:   2 r31:   2 
Registers used: 16 out of 35 (45.7%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   3 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   1 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :   1 cpse  :   0 dec   :   3 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   1 
jmp   :   0 ld    :   3 ldd   :   0 ldi   :  14 lds   :   2 lpm   :   2 
lsl   :   1 lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   4 
pop   :   0 push  :   0 rcall :   2 ret   :   2 reti  :   0 rjmp  :   1 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   1 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 
sts   :   2 sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 24 out of 114 (21.1%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000088    120     16    136   49152   0.3%
[.dseg] 0x002800 0x002809      0      9      9    6144   0.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
